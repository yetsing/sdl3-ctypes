"""
SDL_pixels.h
Pixel Formats and Conversion Routines
Document: https://wiki.libsdl.org/SDL3/CategoryPixels
"""

import ctypes

from sdl3_ctypes.lib import libsdl3
from sdl3_ctypes.SDL_surface import SDL_Surface

# #define SDL_ALPHA_OPAQUE 255
SDL_ALPHA_OPAQUE = 255
# #define SDL_ALPHA_OPAQUE_FLOAT 1.0f
SDL_ALPHA_OPAQUE_FLOAT = 1.0
# #define SDL_ALPHA_TRANSPARENT 0
SDL_ALPHA_TRANSPARENT = 0
# #define SDL_ALPHA_TRANSPARENT_FLOAT 0.0f
SDL_ALPHA_TRANSPARENT_FLOAT = 0.0
# #define SDL_BITSPERPIXEL(format) \
#     (SDL_ISPIXELFORMAT_FOURCC(format) ? 0 : (((format) >> 8) & 0xFF))
# #define SDL_BYTESPERPIXEL(format) \
#     (SDL_ISPIXELFORMAT_FOURCC(format) ? \
#         ((((format) == SDL_PIXELFORMAT_YUY2) || \
#           ((format) == SDL_PIXELFORMAT_UYVY) || \
#           ((format) == SDL_PIXELFORMAT_YVYU) || \
#           ((format) == SDL_PIXELFORMAT_P010)) ? 2 : 1) : (((format) >> 0) & 0xFF))
# #define SDL_COLORSPACECHROMA(cspace)     (SDL_ChromaLocation)(((cspace) >> 20) & 0x0F)
# #define SDL_COLORSPACEMATRIX(cspace)     (SDL_MatrixCoefficients)((cspace) & 0x1F)
# #define SDL_COLORSPACEPRIMARIES(cspace)  (SDL_ColorPrimaries)(((cspace) >> 10) & 0x1F)
# #define SDL_COLORSPACERANGE(cspace)      (SDL_ColorRange)(((cspace) >> 24) & 0x0F)
# #define SDL_COLORSPACETRANSFER(cspace)   (SDL_TransferCharacteristics)(((cspace) >> 5) & 0x1F)
# #define SDL_COLORSPACETYPE(cspace)       (SDL_ColorType)(((cspace) >> 28) & 0x0F)
# #define SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma) \
#     (((Uint32)(type) << 28) | ((Uint32)(range) << 24) | ((Uint32)(chroma) << 20) | \
#     ((Uint32)(primaries) << 10) | ((Uint32)(transfer) << 5) | ((Uint32)(matrix) << 0))
# #define SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes) \
#     ((1 << 28) | ((type) << 24) | ((order) << 20) | ((layout) << 16) | \
#      ((bits) << 8) | ((bytes) << 0))
# #define SDL_DEFINE_PIXELFOURCC(A, B, C, D) SDL_FOURCC(A, B, C, D)
# #define SDL_ISCOLORSPACE_FULL_RANGE(cspace)          (SDL_COLORSPACERANGE(cspace) == SDL_COLOR_RANGE_FULL)
# #define SDL_ISCOLORSPACE_LIMITED_RANGE(cspace)       (SDL_COLORSPACERANGE(cspace) != SDL_COLOR_RANGE_FULL)
# #define SDL_ISCOLORSPACE_MATRIX_BT2020_NCL(cspace)   (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT2020_NCL)
# #define SDL_ISCOLORSPACE_MATRIX_BT601(cspace)        (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT601 || SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT470BG)
# #define SDL_ISCOLORSPACE_MATRIX_BT709(cspace)        (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT709)
# #define SDL_ISPIXELFORMAT_10BIT(format)    \
#       (!SDL_ISPIXELFORMAT_FOURCC(format) && \
#        ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32) && \
#         (SDL_PIXELLAYOUT(format) == SDL_PACKEDLAYOUT_2101010)))
# #define SDL_ISPIXELFORMAT_ALPHA(format)   \
#     ((SDL_ISPIXELFORMAT_PACKED(format) && \
#       ((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) || \
#        (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA) || \
#        (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR) || \
#        (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA))) || \
#      (SDL_ISPIXELFORMAT_ARRAY(format) && \
#       ((SDL_PIXELORDER(format) == SDL_ARRAYORDER_ARGB) || \
#        (SDL_PIXELORDER(format) == SDL_ARRAYORDER_RGBA) || \
#        (SDL_PIXELORDER(format) == SDL_ARRAYORDER_ABGR) || \
#        (SDL_PIXELORDER(format) == SDL_ARRAYORDER_BGRA))))
# #define SDL_ISPIXELFORMAT_ARRAY(format) \
#     (!SDL_ISPIXELFORMAT_FOURCC(format) && \
#      ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU8) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU16) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU32) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32)))
# #define SDL_ISPIXELFORMAT_FLOAT(format)    \
#       (!SDL_ISPIXELFORMAT_FOURCC(format) && \
#        ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) || \
#         (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32)))
# #define SDL_ISPIXELFORMAT_FOURCC(format)  /* The flag is set to 1 because 0x1? is not in the printable ASCII range */ \
#     ((format) && (SDL_PIXELFLAG(format) != 1))
# #define SDL_ISPIXELFORMAT_INDEXED(format)   \
#     (!SDL_ISPIXELFORMAT_FOURCC(format) && \
#      ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX2) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8)))
# #define SDL_ISPIXELFORMAT_PACKED(format) \
#     (!SDL_ISPIXELFORMAT_FOURCC(format) && \
#      ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED8) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED16) || \
#       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32)))
# #define SDL_PIXELFLAG(format)    (((format) >> 28) & 0x0F)
# #define SDL_PIXELLAYOUT(format)  (((format) >> 16) & 0x0F)
# #define SDL_PIXELORDER(format)   (((format) >> 20) & 0x0F)
# #define SDL_PIXELTYPE(format)    (((format) >> 24) & 0x0F)


# typedef enum SDL_ArrayOrder
# {
#     SDL_ARRAYORDER_NONE,
#     SDL_ARRAYORDER_RGB,
#     SDL_ARRAYORDER_RGBA,
#     SDL_ARRAYORDER_ARGB,
#     SDL_ARRAYORDER_BGR,
#     SDL_ARRAYORDER_BGRA,
#     SDL_ARRAYORDER_ABGR
# } SDL_ArrayOrder;
SDL_ARRAYORDER_NONE = 0
SDL_ARRAYORDER_RGB = 1
SDL_ARRAYORDER_RGBA = 2
SDL_ARRAYORDER_ARGB = 3
SDL_ARRAYORDER_BGR = 4
SDL_ARRAYORDER_BGRA = 5
SDL_ARRAYORDER_ABGR = 6
# typedef enum SDL_BitmapOrder
# {
#     SDL_BITMAPORDER_NONE,
#     SDL_BITMAPORDER_4321,
#     SDL_BITMAPORDER_1234
# } SDL_BitmapOrder;
SDL_BITMAPORDER_NONE = 0
SDL_BITMAPORDER_4321 = 1
SDL_BITMAPORDER_1234 = 2
# typedef enum SDL_ChromaLocation
# {
#     SDL_CHROMA_LOCATION_NONE = 0,   /**< RGB, no chroma sampling */
#     SDL_CHROMA_LOCATION_LEFT = 1,   /**< In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge of the 2x2 square. In other words, they have the same horizontal location as the top-left pixel, but is shifted one-half pixel down vertically. */
#     SDL_CHROMA_LOCATION_CENTER = 2, /**< In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2 square. In other words, they are offset one-half pixel to the right and one-half pixel down compared to the top-left pixel. */
#     SDL_CHROMA_LOCATION_TOPLEFT = 3 /**< In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and Cr are sampled at the same location as the group's top-left Y pixel ("co-sited", "co-located"). */
# } SDL_ChromaLocation;
SDL_CHROMA_LOCATION_NONE = 0
SDL_CHROMA_LOCATION_LEFT = 1
SDL_CHROMA_LOCATION_CENTER = 2
SDL_CHROMA_LOCATION_TOPLEFT = 3
# typedef enum SDL_ColorPrimaries
# {
#     SDL_COLOR_PRIMARIES_UNKNOWN = 0,
#     SDL_COLOR_PRIMARIES_BT709 = 1,                  /**< ITU-R BT.709-6 */
#     SDL_COLOR_PRIMARIES_UNSPECIFIED = 2,
#     SDL_COLOR_PRIMARIES_BT470M = 4,                 /**< ITU-R BT.470-6 System M */
#     SDL_COLOR_PRIMARIES_BT470BG = 5,                /**< ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625 */
#     SDL_COLOR_PRIMARIES_BT601 = 6,                  /**< ITU-R BT.601-7 525, SMPTE 170M */
#     SDL_COLOR_PRIMARIES_SMPTE240 = 7,               /**< SMPTE 240M, functionally the same as SDL_COLOR_PRIMARIES_BT601 */
#     SDL_COLOR_PRIMARIES_GENERIC_FILM = 8,           /**< Generic film (color filters using Illuminant C) */
#     SDL_COLOR_PRIMARIES_BT2020 = 9,                 /**< ITU-R BT.2020-2 / ITU-R BT.2100-0 */
#     SDL_COLOR_PRIMARIES_XYZ = 10,                   /**< SMPTE ST 428-1 */
#     SDL_COLOR_PRIMARIES_SMPTE431 = 11,              /**< SMPTE RP 431-2 */
#     SDL_COLOR_PRIMARIES_SMPTE432 = 12,              /**< SMPTE EG 432-1 / DCI P3 */
#     SDL_COLOR_PRIMARIES_EBU3213 = 22,               /**< EBU Tech. 3213-E */
#     SDL_COLOR_PRIMARIES_CUSTOM = 31
# } SDL_ColorPrimaries;
SDL_COLOR_PRIMARIES_UNKNOWN = 0
SDL_COLOR_PRIMARIES_BT709 = 1
SDL_COLOR_PRIMARIES_UNSPECIFIED = 2
SDL_COLOR_PRIMARIES_BT470M = 4
SDL_COLOR_PRIMARIES_BT470BG = 5
SDL_COLOR_PRIMARIES_BT601 = 6
SDL_COLOR_PRIMARIES_SMPTE240 = 7
SDL_COLOR_PRIMARIES_GENERIC_FILM = 8
SDL_COLOR_PRIMARIES_BT2020 = 9
SDL_COLOR_PRIMARIES_XYZ = 10
SDL_COLOR_PRIMARIES_SMPTE431 = 11
SDL_COLOR_PRIMARIES_SMPTE432 = 12
SDL_COLOR_PRIMARIES_EBU3213 = 22
SDL_COLOR_PRIMARIES_CUSTOM = 31
# typedef enum SDL_ColorRange
# {
#     SDL_COLOR_RANGE_UNKNOWN = 0,
#     SDL_COLOR_RANGE_LIMITED = 1, /**< Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma */
#     SDL_COLOR_RANGE_FULL = 2    /**< Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma */
# } SDL_ColorRange;
SDL_COLOR_RANGE_UNKNOWN = 0
SDL_COLOR_RANGE_LIMITED = 1
SDL_COLOR_RANGE_FULL = 2
# typedef enum SDL_Colorspace
# {
#     SDL_COLORSPACE_UNKNOWN = 0,
#     /* sRGB is a gamma corrected colorspace, and the default colorspace for SDL rendering and 8-bit RGB surfaces */
#     SDL_COLORSPACE_SRGB = 0x120005a0u, /**< Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,
#                                  SDL_COLOR_RANGE_FULL,
#                                  SDL_COLOR_PRIMARIES_BT709,
#                                  SDL_TRANSFER_CHARACTERISTICS_SRGB,
#                                  SDL_MATRIX_COEFFICIENTS_IDENTITY,
#                                  SDL_CHROMA_LOCATION_NONE), */
#     /* This is a linear colorspace and the default colorspace for floating point surfaces. On Windows this is the scRGB colorspace, and on Apple platforms this is kCGColorSpaceExtendedLinearSRGB for EDR content */
#     SDL_COLORSPACE_SRGB_LINEAR = 0x12000500u, /**< Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709  */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,
#                                  SDL_COLOR_RANGE_FULL,
#                                  SDL_COLOR_PRIMARIES_BT709,
#                                  SDL_TRANSFER_CHARACTERISTICS_LINEAR,
#                                  SDL_MATRIX_COEFFICIENTS_IDENTITY,
#                                  SDL_CHROMA_LOCATION_NONE), */
#     /* HDR10 is a non-linear HDR colorspace and the default colorspace for 10-bit surfaces */
#     SDL_COLORSPACE_HDR10 = 0x12002600u, /**< Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020  */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,
#                                  SDL_COLOR_RANGE_FULL,
#                                  SDL_COLOR_PRIMARIES_BT2020,
#                                  SDL_TRANSFER_CHARACTERISTICS_PQ,
#                                  SDL_MATRIX_COEFFICIENTS_IDENTITY,
#                                  SDL_CHROMA_LOCATION_NONE), */
#     SDL_COLORSPACE_JPEG = 0x220004c6u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
#                                  SDL_COLOR_RANGE_FULL,
#                                  SDL_COLOR_PRIMARIES_BT709,
#                                  SDL_TRANSFER_CHARACTERISTICS_BT601,
#                                  SDL_MATRIX_COEFFICIENTS_BT601,
#                                  SDL_CHROMA_LOCATION_NONE), */
#     SDL_COLORSPACE_BT601_LIMITED = 0x211018c6u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
#                                  SDL_COLOR_RANGE_LIMITED,
#                                  SDL_COLOR_PRIMARIES_BT601,
#                                  SDL_TRANSFER_CHARACTERISTICS_BT601,
#                                  SDL_MATRIX_COEFFICIENTS_BT601,
#                                  SDL_CHROMA_LOCATION_LEFT), */
#     SDL_COLORSPACE_BT601_FULL = 0x221018c6u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
#                                  SDL_COLOR_RANGE_FULL,
#                                  SDL_COLOR_PRIMARIES_BT601,
#                                  SDL_TRANSFER_CHARACTERISTICS_BT601,
#                                  SDL_MATRIX_COEFFICIENTS_BT601,
#                                  SDL_CHROMA_LOCATION_LEFT), */
#     SDL_COLORSPACE_BT709_LIMITED = 0x21100421u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
#                                  SDL_COLOR_RANGE_LIMITED,
#                                  SDL_COLOR_PRIMARIES_BT709,
#                                  SDL_TRANSFER_CHARACTERISTICS_BT709,
#                                  SDL_MATRIX_COEFFICIENTS_BT709,
#                                  SDL_CHROMA_LOCATION_LEFT), */
#     SDL_COLORSPACE_BT709_FULL = 0x22100421u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
#                                  SDL_COLOR_RANGE_FULL,
#                                  SDL_COLOR_PRIMARIES_BT709,
#                                  SDL_TRANSFER_CHARACTERISTICS_BT709,
#                                  SDL_MATRIX_COEFFICIENTS_BT709,
#                                  SDL_CHROMA_LOCATION_LEFT), */
#     SDL_COLORSPACE_BT2020_LIMITED = 0x21102609u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
#                                  SDL_COLOR_RANGE_LIMITED,
#                                  SDL_COLOR_PRIMARIES_BT2020,
#                                  SDL_TRANSFER_CHARACTERISTICS_PQ,
#                                  SDL_MATRIX_COEFFICIENTS_BT2020_NCL,
#                                  SDL_CHROMA_LOCATION_LEFT), */
#     SDL_COLORSPACE_BT2020_FULL = 0x22102609u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 */
#         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
#                                  SDL_COLOR_RANGE_FULL,
#                                  SDL_COLOR_PRIMARIES_BT2020,
#                                  SDL_TRANSFER_CHARACTERISTICS_PQ,
#                                  SDL_MATRIX_COEFFICIENTS_BT2020_NCL,
#                                  SDL_CHROMA_LOCATION_LEFT), */
#     SDL_COLORSPACE_RGB_DEFAULT = SDL_COLORSPACE_SRGB, /**< The default colorspace for RGB surfaces if no colorspace is specified */
#     SDL_COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_JPEG  /**< The default colorspace for YUV surfaces if no colorspace is specified */
# } SDL_Colorspace;
SDL_COLORSPACE_UNKNOWN = 0
SDL_COLORSPACE_SRGB = 0x120005A0
SDL_COLORSPACE_SRGB_LINEAR = 0x12000500
SDL_COLORSPACE_HDR10 = 0x12002600
SDL_COLORSPACE_JPEG = 0x220004C6
SDL_COLORSPACE_BT601_LIMITED = 0x211018C6
SDL_COLORSPACE_BT601_FULL = 0x221018C6
SDL_COLORSPACE_BT709_LIMITED = 0x21100421
SDL_COLORSPACE_BT709_FULL = 0x22100421
SDL_COLORSPACE_BT2020_LIMITED = 0x21102609
SDL_COLORSPACE_BT2020_FULL = 0x22102609
SDL_COLORSPACE_RGB_DEFAULT = SDL_COLORSPACE_SRGB
SDL_COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_JPEG
# typedef enum SDL_ColorType
# {
#     SDL_COLOR_TYPE_UNKNOWN = 0,
#     SDL_COLOR_TYPE_RGB = 1,
#     SDL_COLOR_TYPE_YCBCR = 2
# } SDL_ColorType;
SDL_COLOR_TYPE_UNKNOWN = 0
SDL_COLOR_TYPE_RGB = 1
SDL_COLOR_TYPE_YCBCR = 2
# typedef enum SDL_MatrixCoefficients
# {
#     SDL_MATRIX_COEFFICIENTS_IDENTITY = 0,
#     SDL_MATRIX_COEFFICIENTS_BT709 = 1,              /**< ITU-R BT.709-6 */
#     SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,
#     SDL_MATRIX_COEFFICIENTS_FCC = 4,                /**< US FCC Title 47 */
#     SDL_MATRIX_COEFFICIENTS_BT470BG = 5,            /**< ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as SDL_MATRIX_COEFFICIENTS_BT601 */
#     SDL_MATRIX_COEFFICIENTS_BT601 = 6,              /**< ITU-R BT.601-7 525 */
#     SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7,           /**< SMPTE 240M */
#     SDL_MATRIX_COEFFICIENTS_YCGCO = 8,
#     SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9,         /**< ITU-R BT.2020-2 non-constant luminance */
#     SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10,         /**< ITU-R BT.2020-2 constant luminance */
#     SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11,         /**< SMPTE ST 2085 */
#     SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12,
#     SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13,
#     SDL_MATRIX_COEFFICIENTS_ICTCP = 14,             /**< ITU-R BT.2100-0 ICTCP */
#     SDL_MATRIX_COEFFICIENTS_CUSTOM = 31
# } SDL_MatrixCoefficients;
SDL_MATRIX_COEFFICIENTS_IDENTITY = 0
SDL_MATRIX_COEFFICIENTS_BT709 = 1
SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2
SDL_MATRIX_COEFFICIENTS_FCC = 4
SDL_MATRIX_COEFFICIENTS_BT470BG = 5
SDL_MATRIX_COEFFICIENTS_BT601 = 6
SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7
SDL_MATRIX_COEFFICIENTS_YCGCO = 8
SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9
SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10
SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11
SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12
SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13
SDL_MATRIX_COEFFICIENTS_ICTCP = 14
SDL_MATRIX_COEFFICIENTS_CUSTOM = 31
# typedef enum SDL_PackedLayout
# {
#     SDL_PACKEDLAYOUT_NONE,
#     SDL_PACKEDLAYOUT_332,
#     SDL_PACKEDLAYOUT_4444,
#     SDL_PACKEDLAYOUT_1555,
#     SDL_PACKEDLAYOUT_5551,
#     SDL_PACKEDLAYOUT_565,
#     SDL_PACKEDLAYOUT_8888,
#     SDL_PACKEDLAYOUT_2101010,
#     SDL_PACKEDLAYOUT_1010102
# } SDL_PackedLayout;
SDL_PACKEDLAYOUT_NONE = 0
SDL_PACKEDLAYOUT_332 = 1
SDL_PACKEDLAYOUT_4444 = 2
SDL_PACKEDLAYOUT_1555 = 3
SDL_PACKEDLAYOUT_5551 = 4
SDL_PACKEDLAYOUT_565 = 5
SDL_PACKEDLAYOUT_8888 = 6
SDL_PACKEDLAYOUT_2101010 = 7
SDL_PACKEDLAYOUT_1010102 = 8
# typedef enum SDL_PackedOrder
# {
#     SDL_PACKEDORDER_NONE,
#     SDL_PACKEDORDER_XRGB,
#     SDL_PACKEDORDER_RGBX,
#     SDL_PACKEDORDER_ARGB,
#     SDL_PACKEDORDER_RGBA,
#     SDL_PACKEDORDER_XBGR,
#     SDL_PACKEDORDER_BGRX,
#     SDL_PACKEDORDER_ABGR,
#     SDL_PACKEDORDER_BGRA
# } SDL_PackedOrder;
SDL_PACKEDORDER_NONE = 0
SDL_PACKEDORDER_XRGB = 1
SDL_PACKEDORDER_RGBX = 2
SDL_PACKEDORDER_ARGB = 3
SDL_PACKEDORDER_RGBA = 4
SDL_PACKEDORDER_XBGR = 5
SDL_PACKEDORDER_BGRX = 6
SDL_PACKEDORDER_ABGR = 7
SDL_PACKEDORDER_BGRA = 8
# typedef enum SDL_PixelFormat
# {
#     SDL_PIXELFORMAT_UNKNOWN = 0,
#     SDL_PIXELFORMAT_INDEX1LSB = 0x11100100u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0, 1, 0), */
#     SDL_PIXELFORMAT_INDEX1MSB = 0x11200100u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0, 1, 0), */
#     SDL_PIXELFORMAT_INDEX2LSB = 0x1c100200u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_4321, 0, 2, 0), */
#     SDL_PIXELFORMAT_INDEX2MSB = 0x1c200200u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_1234, 0, 2, 0), */
#     SDL_PIXELFORMAT_INDEX4LSB = 0x12100400u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0, 4, 0), */
#     SDL_PIXELFORMAT_INDEX4MSB = 0x12200400u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0, 4, 0), */
#     SDL_PIXELFORMAT_INDEX8 = 0x13000801u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1), */
#     SDL_PIXELFORMAT_RGB332 = 0x14110801u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_332, 8, 1), */
#     SDL_PIXELFORMAT_XRGB4444 = 0x15120c02u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_4444, 12, 2), */
#     SDL_PIXELFORMAT_XBGR4444 = 0x15520c02u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_4444, 12, 2), */
#     SDL_PIXELFORMAT_XRGB1555 = 0x15130f02u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_1555, 15, 2), */
#     SDL_PIXELFORMAT_XBGR1555 = 0x15530f02u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_1555, 15, 2), */
#     SDL_PIXELFORMAT_ARGB4444 = 0x15321002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_4444, 16, 2), */
#     SDL_PIXELFORMAT_RGBA4444 = 0x15421002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_4444, 16, 2), */
#     SDL_PIXELFORMAT_ABGR4444 = 0x15721002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_4444, 16, 2), */
#     SDL_PIXELFORMAT_BGRA4444 = 0x15821002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_4444, 16, 2), */
#     SDL_PIXELFORMAT_ARGB1555 = 0x15331002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_1555, 16, 2), */
#     SDL_PIXELFORMAT_RGBA5551 = 0x15441002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_5551, 16, 2), */
#     SDL_PIXELFORMAT_ABGR1555 = 0x15731002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_1555, 16, 2), */
#     SDL_PIXELFORMAT_BGRA5551 = 0x15841002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_5551, 16, 2), */
#     SDL_PIXELFORMAT_RGB565 = 0x15151002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_565, 16, 2), */
#     SDL_PIXELFORMAT_BGR565 = 0x15551002u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_565, 16, 2), */
#     SDL_PIXELFORMAT_RGB24 = 0x17101803u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0, 24, 3), */
#     SDL_PIXELFORMAT_BGR24 = 0x17401803u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0, 24, 3), */
#     SDL_PIXELFORMAT_XRGB8888 = 0x16161804u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_8888, 24, 4), */
#     SDL_PIXELFORMAT_RGBX8888 = 0x16261804u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX, SDL_PACKEDLAYOUT_8888, 24, 4), */
#     SDL_PIXELFORMAT_XBGR8888 = 0x16561804u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_8888, 24, 4), */
#     SDL_PIXELFORMAT_BGRX8888 = 0x16661804u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX, SDL_PACKEDLAYOUT_8888, 24, 4), */
#     SDL_PIXELFORMAT_ARGB8888 = 0x16362004u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_8888, 32, 4), */
#     SDL_PIXELFORMAT_RGBA8888 = 0x16462004u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4), */
#     SDL_PIXELFORMAT_ABGR8888 = 0x16762004u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_8888, 32, 4), */
#     SDL_PIXELFORMAT_BGRA8888 = 0x16862004u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_8888, 32, 4), */
#     SDL_PIXELFORMAT_XRGB2101010 = 0x16172004u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_2101010, 32, 4), */
#     SDL_PIXELFORMAT_XBGR2101010 = 0x16572004u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_2101010, 32, 4), */
#     SDL_PIXELFORMAT_ARGB2101010 = 0x16372004u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_2101010, 32, 4), */
#     SDL_PIXELFORMAT_ABGR2101010 = 0x16772004u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_2101010, 32, 4), */
#     SDL_PIXELFORMAT_RGB48 = 0x18103006u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGB, 0, 48, 6), */
#     SDL_PIXELFORMAT_BGR48 = 0x18403006u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGR, 0, 48, 6), */
#     SDL_PIXELFORMAT_RGBA64 = 0x18204008u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGBA, 0, 64, 8), */
#     SDL_PIXELFORMAT_ARGB64 = 0x18304008u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ARGB, 0, 64, 8), */
#     SDL_PIXELFORMAT_BGRA64 = 0x18504008u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGRA, 0, 64, 8), */
#     SDL_PIXELFORMAT_ABGR64 = 0x18604008u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ABGR, 0, 64, 8), */
#     SDL_PIXELFORMAT_RGB48_FLOAT = 0x1a103006u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGB, 0, 48, 6), */
#     SDL_PIXELFORMAT_BGR48_FLOAT = 0x1a403006u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGR, 0, 48, 6), */
#     SDL_PIXELFORMAT_RGBA64_FLOAT = 0x1a204008u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGBA, 0, 64, 8), */
#     SDL_PIXELFORMAT_ARGB64_FLOAT = 0x1a304008u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ARGB, 0, 64, 8), */
#     SDL_PIXELFORMAT_BGRA64_FLOAT = 0x1a504008u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGRA, 0, 64, 8), */
#     SDL_PIXELFORMAT_ABGR64_FLOAT = 0x1a604008u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ABGR, 0, 64, 8), */
#     SDL_PIXELFORMAT_RGB96_FLOAT = 0x1b10600cu,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGB, 0, 96, 12), */
#     SDL_PIXELFORMAT_BGR96_FLOAT = 0x1b40600cu,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGR, 0, 96, 12), */
#     SDL_PIXELFORMAT_RGBA128_FLOAT = 0x1b208010u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGBA, 0, 128, 16), */
#     SDL_PIXELFORMAT_ARGB128_FLOAT = 0x1b308010u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ARGB, 0, 128, 16), */
#     SDL_PIXELFORMAT_BGRA128_FLOAT = 0x1b508010u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGRA, 0, 128, 16), */
#     SDL_PIXELFORMAT_ABGR128_FLOAT = 0x1b608010u,
#         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ABGR, 0, 128, 16), */
#     SDL_PIXELFORMAT_YV12 = 0x32315659u,      /**< Planar mode: Y + V + U  (3 planes) */
#         /* SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2'), */
#     SDL_PIXELFORMAT_IYUV = 0x56555949u,      /**< Planar mode: Y + U + V  (3 planes) */
#         /* SDL_DEFINE_PIXELFOURCC('I', 'Y', 'U', 'V'), */
#     SDL_PIXELFORMAT_YUY2 = 0x32595559u,      /**< Packed mode: Y0+U0+Y1+V0 (1 plane) */
#         /* SDL_DEFINE_PIXELFOURCC('Y', 'U', 'Y', '2'), */
#     SDL_PIXELFORMAT_UYVY = 0x59565955u,      /**< Packed mode: U0+Y0+V0+Y1 (1 plane) */
#         /* SDL_DEFINE_PIXELFOURCC('U', 'Y', 'V', 'Y'), */
#     SDL_PIXELFORMAT_YVYU = 0x55595659u,      /**< Packed mode: Y0+V0+Y1+U0 (1 plane) */
#         /* SDL_DEFINE_PIXELFOURCC('Y', 'V', 'Y', 'U'), */
#     SDL_PIXELFORMAT_NV12 = 0x3231564eu,      /**< Planar mode: Y + U/V interleaved  (2 planes) */
#         /* SDL_DEFINE_PIXELFOURCC('N', 'V', '1', '2'), */
#     SDL_PIXELFORMAT_NV21 = 0x3132564eu,      /**< Planar mode: Y + V/U interleaved  (2 planes) */
#         /* SDL_DEFINE_PIXELFOURCC('N', 'V', '2', '1'), */
#     SDL_PIXELFORMAT_P010 = 0x30313050u,      /**< Planar mode: Y + U/V interleaved  (2 planes) */
#         /* SDL_DEFINE_PIXELFOURCC('P', '0', '1', '0'), */
#     SDL_PIXELFORMAT_EXTERNAL_OES = 0x2053454fu,     /**< Android video texture format */
#         /* SDL_DEFINE_PIXELFOURCC('O', 'E', 'S', ' ') */
#     SDL_PIXELFORMAT_MJPG = 0x47504a4du,     /**< Motion JPEG */
#         /* SDL_DEFINE_PIXELFOURCC('M', 'J', 'P', 'G') */
#     /* Aliases for RGBA byte arrays of color data, for the current platform */
#     #if SDL_BYTEORDER == SDL_BIG_ENDIAN
#     SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA8888,
#     SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB8888,
#     SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA8888,
#     SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR8888,
#     SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_RGBX8888,
#     SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_XRGB8888,
#     SDL_PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_BGRX8888,
#     SDL_PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_XBGR8888
#     #else
#     SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888,
#     SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888,
#     SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888,
#     SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888,
#     SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_XBGR8888,
#     SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_BGRX8888,
#     SDL_PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_XRGB8888,
#     SDL_PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_RGBX8888
#     #endif
# } SDL_PixelFormat;
import sys

SDL_PIXELFORMAT_UNKNOWN = 0
SDL_PIXELFORMAT_INDEX1LSB = 0x11100100
SDL_PIXELFORMAT_INDEX1MSB = 0x11200100
SDL_PIXELFORMAT_INDEX2LSB = 0x1C100200
SDL_PIXELFORMAT_INDEX2MSB = 0x1C200200
SDL_PIXELFORMAT_INDEX4LSB = 0x12100400
SDL_PIXELFORMAT_INDEX4MSB = 0x12200400
SDL_PIXELFORMAT_INDEX8 = 0x13000801
SDL_PIXELFORMAT_RGB332 = 0x14110801
SDL_PIXELFORMAT_XRGB4444 = 0x15120C02
SDL_PIXELFORMAT_XBGR4444 = 0x15520C02
SDL_PIXELFORMAT_XRGB1555 = 0x15130F02
SDL_PIXELFORMAT_XBGR1555 = 0x15530F02
SDL_PIXELFORMAT_ARGB4444 = 0x15321002
SDL_PIXELFORMAT_RGBA4444 = 0x15421002
SDL_PIXELFORMAT_ABGR4444 = 0x15721002
SDL_PIXELFORMAT_BGRA4444 = 0x15821002
SDL_PIXELFORMAT_ARGB1555 = 0x15331002
SDL_PIXELFORMAT_RGBA5551 = 0x15441002
SDL_PIXELFORMAT_ABGR1555 = 0x15731002
SDL_PIXELFORMAT_BGRA5551 = 0x15841002
SDL_PIXELFORMAT_RGB565 = 0x15151002
SDL_PIXELFORMAT_BGR565 = 0x15551002
SDL_PIXELFORMAT_RGB24 = 0x17101803
SDL_PIXELFORMAT_BGR24 = 0x17401803
SDL_PIXELFORMAT_XRGB8888 = 0x16161804
SDL_PIXELFORMAT_RGBX8888 = 0x16261804
SDL_PIXELFORMAT_XBGR8888 = 0x16561804
SDL_PIXELFORMAT_BGRX8888 = 0x16661804
SDL_PIXELFORMAT_ARGB8888 = 0x16362004
SDL_PIXELFORMAT_RGBA8888 = 0x16462004
SDL_PIXELFORMAT_ABGR8888 = 0x16762004
SDL_PIXELFORMAT_BGRA8888 = 0x16862004
SDL_PIXELFORMAT_XRGB2101010 = 0x16172004
SDL_PIXELFORMAT_XBGR2101010 = 0x16572004
SDL_PIXELFORMAT_ARGB2101010 = 0x16372004
SDL_PIXELFORMAT_ABGR2101010 = 0x16772004
SDL_PIXELFORMAT_RGB48 = 0x18103006
SDL_PIXELFORMAT_BGR48 = 0x18403006
SDL_PIXELFORMAT_RGBA64 = 0x18204008
SDL_PIXELFORMAT_ARGB64 = 0x18304008
SDL_PIXELFORMAT_BGRA64 = 0x18504008
SDL_PIXELFORMAT_ABGR64 = 0x18604008
SDL_PIXELFORMAT_RGB48_FLOAT = 0x1A103006
SDL_PIXELFORMAT_BGR48_FLOAT = 0x1A403006
SDL_PIXELFORMAT_RGBA64_FLOAT = 0x1A204008
SDL_PIXELFORMAT_ARGB64_FLOAT = 0x1A304008
SDL_PIXELFORMAT_BGRA64_FLOAT = 0x1A504008
SDL_PIXELFORMAT_ABGR64_FLOAT = 0x1A604008
SDL_PIXELFORMAT_RGB96_FLOAT = 0x1B10600C
SDL_PIXELFORMAT_BGR96_FLOAT = 0x1B40600C
SDL_PIXELFORMAT_RGBA128_FLOAT = 0x1B208010
SDL_PIXELFORMAT_ARGB128_FLOAT = 0x1B308010
SDL_PIXELFORMAT_BGRA128_FLOAT = 0x1B508010
SDL_PIXELFORMAT_ABGR128_FLOAT = 0x1B608010
SDL_PIXELFORMAT_YV12 = 0x32315659
SDL_PIXELFORMAT_IYUV = 0x56555949
SDL_PIXELFORMAT_YUY2 = 0x32595559
SDL_PIXELFORMAT_UYVY = 0x59565955
SDL_PIXELFORMAT_YVYU = 0x55595659
SDL_PIXELFORMAT_NV12 = 0x3231564E
SDL_PIXELFORMAT_NV21 = 0x3132564E
SDL_PIXELFORMAT_P010 = 0x30313050
SDL_PIXELFORMAT_EXTERNAL_OES = 0x2053454F
SDL_PIXELFORMAT_MJPG = 0x47504A4D
if sys.byteorder == "big":
    SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA8888
    SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB8888
    SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA8888
    SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR8888
    SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_RGBX8888
    SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_XRGB8888
    SDL_PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_BGRX8888
    SDL_PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_XBGR8888
else:
    SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888
    SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888
    SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888
    SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888
    SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_XBGR8888
    SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_BGRX8888
    SDL_PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_XRGB8888
    SDL_PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_RGBX8888

# typedef enum SDL_PixelType
# {
#     SDL_PIXELTYPE_UNKNOWN,
#     SDL_PIXELTYPE_INDEX1,
#     SDL_PIXELTYPE_INDEX4,
#     SDL_PIXELTYPE_INDEX8,
#     SDL_PIXELTYPE_PACKED8,
#     SDL_PIXELTYPE_PACKED16,
#     SDL_PIXELTYPE_PACKED32,
#     SDL_PIXELTYPE_ARRAYU8,
#     SDL_PIXELTYPE_ARRAYU16,
#     SDL_PIXELTYPE_ARRAYU32,
#     SDL_PIXELTYPE_ARRAYF16,
#     SDL_PIXELTYPE_ARRAYF32,
#     /* appended at the end for compatibility with sdl2-compat:  */
#     SDL_PIXELTYPE_INDEX2
# } SDL_PixelType;
SDL_PIXELTYPE_UNKNOWN = 0
SDL_PIXELTYPE_INDEX1 = 1
SDL_PIXELTYPE_INDEX4 = 2
SDL_PIXELTYPE_INDEX8 = 3
SDL_PIXELTYPE_PACKED8 = 4
SDL_PIXELTYPE_PACKED16 = 5
SDL_PIXELTYPE_PACKED32 = 6
SDL_PIXELTYPE_ARRAYU8 = 7
SDL_PIXELTYPE_ARRAYU16 = 8
SDL_PIXELTYPE_ARRAYU32 = 9
SDL_PIXELTYPE_ARRAYF16 = 10
SDL_PIXELTYPE_ARRAYF32 = 11
SDL_PIXELTYPE_INDEX2 = 12
# typedef enum SDL_TransferCharacteristics
# {
#     SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0,
#     SDL_TRANSFER_CHARACTERISTICS_BT709 = 1,         /**< Rec. ITU-R BT.709-6 / ITU-R BT1361 */
#     SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
#     SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4,       /**< ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL & SECAM */
#     SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5,       /**< ITU-R BT.470-6 System B, G */
#     SDL_TRANSFER_CHARACTERISTICS_BT601 = 6,         /**< SMPTE ST 170M / ITU-R BT.601-7 525 or 625 */
#     SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7,      /**< SMPTE ST 240M */
#     SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8,
#     SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9,
#     SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10,
#     SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11,     /**< IEC 61966-2-4 */
#     SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12,       /**< ITU-R BT1361 Extended Colour Gamut */
#     SDL_TRANSFER_CHARACTERISTICS_SRGB = 13,         /**< IEC 61966-2-1 (sRGB or sYCC) */
#     SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14, /**< ITU-R BT2020 for 10-bit system */
#     SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15, /**< ITU-R BT2020 for 12-bit system */
#     SDL_TRANSFER_CHARACTERISTICS_PQ = 16,           /**< SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems */
#     SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17,     /**< SMPTE ST 428-1 */
#     SDL_TRANSFER_CHARACTERISTICS_HLG = 18,          /**< ARIB STD-B67, known as "hybrid log-gamma" (HLG) */
#     SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31
# } SDL_TransferCharacteristics;
SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0
SDL_TRANSFER_CHARACTERISTICS_BT709 = 1
SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2
SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4
SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5
SDL_TRANSFER_CHARACTERISTICS_BT601 = 6
SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7
SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8
SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9
SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10
SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11
SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12
SDL_TRANSFER_CHARACTERISTICS_SRGB = 13
SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14
SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15
SDL_TRANSFER_CHARACTERISTICS_PQ = 16
SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17
SDL_TRANSFER_CHARACTERISTICS_HLG = 18
SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31


# typedef struct SDL_Color
# {
#     Uint8 r;
#     Uint8 g;
#     Uint8 b;
#     Uint8 a;
# } SDL_Color;
class SDL_Color(ctypes.Structure):
    _fields_ = [
        ("r", ctypes.c_uint8),
        ("g", ctypes.c_uint8),
        ("b", ctypes.c_uint8),
        ("a", ctypes.c_uint8),
    ]


# typedef struct SDL_FColor
# {
#     float r;
#     float g;
#     float b;
#     float a;
# } SDL_FColor;
class SDL_FColor(ctypes.Structure):
    _fields_ = [
        ("r", ctypes.c_float),
        ("g", ctypes.c_float),
        ("b", ctypes.c_float),
        ("a", ctypes.c_float),
    ]


# typedef struct SDL_Palette
# {
#     int ncolors;        /**< number of elements in `colors`. */
#     SDL_Color *colors;  /**< an array of colors, `ncolors` long. */
#     Uint32 version;     /**< internal use only, do not touch. */
#     int refcount;       /**< internal use only, do not touch. */
# } SDL_Palette;
class SDL_Palette(ctypes.Structure):
    _fields_ = [
        ("ncolors", ctypes.c_int),
        ("colors", ctypes.POINTER(SDL_Color)),
        ("version", ctypes.c_uint32),
        ("refcount", ctypes.c_int),
    ]


# typedef struct SDL_PixelFormatDetails
# {
#     SDL_PixelFormat format;
#     Uint8 bits_per_pixel;
#     Uint8 bytes_per_pixel;
#     Uint8 padding[2];
#     Uint32 Rmask;
#     Uint32 Gmask;
#     Uint32 Bmask;
#     Uint32 Amask;
#     Uint8 Rbits;
#     Uint8 Gbits;
#     Uint8 Bbits;
#     Uint8 Abits;
#     Uint8 Rshift;
#     Uint8 Gshift;
#     Uint8 Bshift;
#     Uint8 Ashift;
# } SDL_PixelFormatDetails;
class SDL_PixelFormatDetails(ctypes.Structure):
    _fields_ = [
        ("format", ctypes.c_int),
        ("bits_per_pixel", ctypes.c_uint8),
        ("bytes_per_pixel", ctypes.c_uint8),
        ("padding", ctypes.c_uint8 * 2),
        ("Rmask", ctypes.c_uint32),
        ("Gmask", ctypes.c_uint32),
        ("Bmask", ctypes.c_uint32),
        ("Amask", ctypes.c_uint32),
        ("Rbits", ctypes.c_uint8),
        ("Gbits", ctypes.c_uint8),
        ("Bbits", ctypes.c_uint8),
        ("Abits", ctypes.c_uint8),
        ("Rshift", ctypes.c_uint8),
        ("Gshift", ctypes.c_uint8),
        ("Bshift", ctypes.c_uint8),
        ("Ashift", ctypes.c_uint8),
    ]


# SDL_Palette * SDL_CreatePalette(int ncolors);
SDL_CreatePalette = libsdl3.SDL_CreatePalette
SDL_CreatePalette.argtypes = [ctypes.c_int]
SDL_CreatePalette.restype = ctypes.POINTER(SDL_Palette)


# void SDL_DestroyPalette(SDL_Palette *palette);
SDL_DestroyPalette = libsdl3.SDL_DestroyPalette
SDL_DestroyPalette.argtypes = [ctypes.POINTER(SDL_Palette)]
SDL_DestroyPalette.restype = None


# bool SDL_GetMasksForPixelFormat(SDL_PixelFormat format, int *bpp, Uint32 *Rmask, Uint32 *Gmask, Uint32 *Bmask, Uint32 *Amask);
SDL_GetMasksForPixelFormat = libsdl3.SDL_GetMasksForPixelFormat
SDL_GetMasksForPixelFormat.argtypes = [
    ctypes.c_int,
    ctypes.POINTER(ctypes.c_int),
    ctypes.POINTER(ctypes.c_uint32),
    ctypes.POINTER(ctypes.c_uint32),
    ctypes.POINTER(ctypes.c_uint32),
    ctypes.POINTER(ctypes.c_uint32),
]
SDL_GetMasksForPixelFormat.restype = ctypes.c_bool


# const SDL_PixelFormatDetails * SDL_GetPixelFormatDetails(SDL_PixelFormat format);
SDL_GetPixelFormatDetails = libsdl3.SDL_GetPixelFormatDetails
SDL_GetPixelFormatDetails.argtypes = [ctypes.c_int]
SDL_GetPixelFormatDetails.restype = ctypes.POINTER(SDL_PixelFormatDetails)


# SDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
SDL_GetPixelFormatForMasks = libsdl3.SDL_GetPixelFormatForMasks
SDL_GetPixelFormatForMasks.argtypes = [
    ctypes.c_int,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.c_uint32,
]
SDL_GetPixelFormatForMasks.restype = ctypes.c_int


# const char * SDL_GetPixelFormatName(SDL_PixelFormat format);
SDL_GetPixelFormatName = libsdl3.SDL_GetPixelFormatName
SDL_GetPixelFormatName.argtypes = [ctypes.c_int]
SDL_GetPixelFormatName.restype = ctypes.c_char_p


# void SDL_GetRGB(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);
SDL_GetRGB = libsdl3.SDL_GetRGB
SDL_GetRGB.argtypes = [
    ctypes.c_uint32,
    ctypes.POINTER(SDL_PixelFormatDetails),
    ctypes.POINTER(SDL_Palette),
    ctypes.POINTER(ctypes.c_uint8),
    ctypes.POINTER(ctypes.c_uint8),
    ctypes.POINTER(ctypes.c_uint8),
]
SDL_GetRGB.restype = None


# void SDL_GetRGBA(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
SDL_GetRGBA = libsdl3.SDL_GetRGBA
SDL_GetRGBA.argtypes = [
    ctypes.c_uint32,
    ctypes.POINTER(SDL_PixelFormatDetails),
    ctypes.POINTER(SDL_Palette),
    ctypes.POINTER(ctypes.c_uint8),
    ctypes.POINTER(ctypes.c_uint8),
    ctypes.POINTER(ctypes.c_uint8),
    ctypes.POINTER(ctypes.c_uint8),
]
SDL_GetRGBA.restype = None


# Uint32 SDL_MapRGB(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b);
SDL_MapRGB = libsdl3.SDL_MapRGB
SDL_MapRGB.argtypes = [
    ctypes.POINTER(SDL_PixelFormatDetails),
    ctypes.POINTER(SDL_Palette),
    ctypes.c_uint8,
    ctypes.c_uint8,
    ctypes.c_uint8,
]
SDL_MapRGB.restype = ctypes.c_uint32


# Uint32 SDL_MapRGBA(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
SDL_MapRGBA = libsdl3.SDL_MapRGBA
SDL_MapRGBA.argtypes = [
    ctypes.POINTER(SDL_PixelFormatDetails),
    ctypes.POINTER(SDL_Palette),
    ctypes.c_uint8,
    ctypes.c_uint8,
    ctypes.c_uint8,
    ctypes.c_uint8,
]
SDL_MapRGBA.restype = ctypes.c_uint32


# Uint32 SDL_MapSurfaceRGB(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);
SDL_MapSurfaceRGB = libsdl3.SDL_MapSurfaceRGB
SDL_MapSurfaceRGB.argtypes = [
    ctypes.POINTER(SDL_Surface),
    ctypes.c_uint8,
    ctypes.c_uint8,
    ctypes.c_uint8,
]
SDL_MapSurfaceRGB.restype = ctypes.c_uint32


# Uint32 SDL_MapSurfaceRGBA(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
SDL_MapSurfaceRGBA = libsdl3.SDL_MapSurfaceRGBA
SDL_MapSurfaceRGBA.argtypes = [
    ctypes.POINTER(SDL_Surface),
    ctypes.c_uint8,
    ctypes.c_uint8,
    ctypes.c_uint8,
    ctypes.c_uint8,
]
SDL_MapSurfaceRGBA.restype = ctypes.c_uint32


# bool SDL_SetPaletteColors(SDL_Palette *palette, const SDL_Color *colors, int firstcolor, int ncolors);
SDL_SetPaletteColors = libsdl3.SDL_SetPaletteColors
SDL_SetPaletteColors.argtypes = [
    ctypes.POINTER(SDL_Palette),
    ctypes.POINTER(SDL_Color),
    ctypes.c_int,
    ctypes.c_int,
]
SDL_SetPaletteColors.restype = ctypes.c_bool
